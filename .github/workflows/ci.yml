name: Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install additional formatting tools
          pip install autoflake pyupgrade docformatter add-trailing-comma

      - name: Code Quality Analysis
        run: |
          # Remove unused imports and variables
          autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive app/ tests/

          # Upgrade Python syntax
          pyupgrade --py311-plus --keep-runtime-typing $(find app/ tests/ -name "*.py")

          # Format docstrings
          docformatter --in-place --recursive app/ tests/

          # Add trailing commas
          add-trailing-comma app/ tests/

          # Auto-fix formatting issues
          black app/ tests/
          isort app/ tests/

          # Verify fixes
          black --check app/ tests/
          isort --check app/ tests/

          # Static code analysis
          flake8 app/ tests/ \
            --max-line-length=88 \
            --max-complexity=10 \
            --select=E9,F63,F7,F82,C901 \
            --statistics

          # Type checking
          mypy app/ --config-file=mypy.ini

      - name: Commit formatting changes
        if: github.event_name == 'pull_request'
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "style: auto-format code and remove unused imports"
            git push
          fi

      - name: Security Analysis
        run: |
          # Code security scan
          bandit -r app/ -c pyproject.toml -ll

          # Dependencies security check
          pip install safety
          safety check

      - name: Code Duplication Analysis
        run: |
          pip install radon
          radon cc app/ -a -s
          radon mi app/ -s
          radon raw app/ -s

      - name: Run Tests with Coverage
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: mydb
          DATABASE_USER: myuser
          DATABASE_PASSWORD: mypassword
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          # Initialize test database
          PGPASSWORD=mypassword psql -h localhost -U myuser -d mydb -f postgres_schema/initial_schema.sql

          # Run tests with coverage
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html \
            --durations=10 \
            -v

      - name: Verify Coverage Threshold
        run: |
          echo "Verifying minimum coverage threshold of 80%"
          coverage_threshold=80
          coverage_result=$(coverage report | grep "TOTAL" | awk '{print $NF}' | sed 's/%//')
          echo "Current coverage: $coverage_result%"

          if (( $(echo "$coverage_result < $coverage_threshold" | bc -l) )); then
            echo "Coverage ($coverage_result%) is below minimum threshold of $coverage_threshold%"
            exit 1
          else
            echo "Coverage ($coverage_result%) meets minimum threshold of $coverage_threshold%"
          fi

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
